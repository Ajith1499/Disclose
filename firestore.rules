/**
 * @file Firebase Security Rules for LocalThreads Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 * while allowing public read access to product and shop information.  Write access to
 * product and shop data is currently open, but should be secured in future iterations.
 *
 * @data_structure
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /shops/{shopId}: Stores shop profiles. Currently open access.
 * - /shops/{shopId}/products/{productId}: Stores product information. Currently open read access.
 * - /users/{userId}/wishlists/{wishlistId}: Stores wishlists, accessible only by the user.
 * - /users/{userId}/wallets/{walletId}: Stores wallets, accessible only by the user.
 * - /users/{userId}/wallets/{walletId}/transactions/{transactionId}: Stores transaction history, accessible only by the user.
 *
 * @key_security_decisions
 * - User listing is disallowed.
 * - Public read access is granted to products and shops.
 * - Write access to products and shops is currently not secured and MUST be addressed.
 *
 * @denormalization_for_authorization N/A - No denormalization needed based on the current data structure.
 * However, if write access to products needs to be restricted to shop owners, the shop owner's ID
 * should be denormalized into the product document.
 *
 * @structural_segregation User-specific data is stored under the /users/{userId} path, ensuring
 * clear separation of concerns and easy enforcement of ownership-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to shop profiles. Write access is not secured and should be addressed.
     * @path /shops/{shopId}
     * @allow (get, list) Any user can read shop profiles.
     * @deny (create, update, delete) No specific restrictions currently in place.
     * @principle Public read access with owner-only writes (currently not enforced).
     */
    match /shops/{shopId} {
      allow get, list: if true;

      // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product information. Write access is not secured and should be addressed.
     * @path /shops/{shopId}/products/{productId}
     * @allow (get, list) Any user can read product information.
     * @deny (create, update, delete) No specific restrictions currently in place.
     * @principle Public read access with owner-only writes (currently not enforced).
     */
    match /shops/{shopId}/products/{productId} {
      allow get, list: if true;

      // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for wishlists. Only the user can read and write their own wishlists.
     * @path /users/{userId}/wishlists/{wishlistId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123/wishlists/wishlist456.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123/wishlists/wishlist456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wishlists/{wishlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for wallets. Only the user can read and write their own wallets.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123/wallets/wallet456.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123/wallets/wallet456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for transactions. Only the user can read and write their own transactions.
     * @path /users/{userId}/wallets/{walletId}/transactions/{transactionId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123/wallets/wallet456/transactions/transaction789.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123/wallets/wallet456/transactions/transaction789.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }


      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}