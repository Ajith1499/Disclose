/**
 * @fileOverview Firestore Security Rules for the LocalThreads application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (profiles, wishlists, wallets, transactions).
 * Shops and Products are treated as public entities with no ownership restrictions in this prototype, though the structure supports adding such restrictions later.
 *
 * Data Structure:
 * - /users/{userId}: User profiles and related data.
 * - /shops/{shopId}: Shop profiles.
 * - /shops/{shopId}/products/{productId}: Product information for each shop.
 * - /users/{userId}/wishlists/{wishlistId}: User wishlists.
 * - /users/{userId}/wallets/{walletId}: User wallets.
 * - /users/{userId}/wallets/{walletId}/transactions/{transactionId}: Transaction history.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Shops and Products have open read access for this prototype.
 * - List operations are secured by path-based ownership for user-scoped data.
 *
 * Denormalization for Authorization:
 *  - While not currently used, the product description mentions denormalizing `shopId` onto `Product` documents.
 *  If `Product` write access depended on `Shop` attributes, those attributes would be copied into the `Product` documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the user can read, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, or delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the profile of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to shop profiles.  All users can read shop profiles.
     * @path /shops/{shopId}
     * @allow (get, list) Any user can read shop profiles.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete shop profiles.
     * @principle Allows public read access.
     */
    match /shops/{shopId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to product information for each shop. All users can read product information.
     * @path /shops/{shopId}/products/{productId}
     * @allow (get, list) Any user can read product information.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete product information.
     * @principle Allows public read access.
     */
    match /shops/{shopId}/products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to user-specific wishlists. Only the user can read, update, or delete their own wishlists.
     * @path /users/{userId}/wishlists/{wishlistId}
     * @allow (create) User with ID 'user123' can create a wishlist if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, or delete their wishlist if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user456' cannot create a wishlist for user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the wishlist of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wishlists/{wishlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user wallets. Only the user can read, update, or delete their own wallet.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) User with ID 'user123' can create their wallet if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, or delete their wallet if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user456' cannot create a wallet for user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the wallet of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallets/{walletId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction history for each wallet. Only the user can read, update, or delete their own transaction history.
     * @path /users/{userId}/wallets/{walletId}/transactions/{transactionId}
     * @allow (create) User with ID 'user123' can create a transaction if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, or delete their transaction if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user456' cannot create a transaction for user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the transaction of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallets/{walletId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
        return request.auth != null;
    }
  }
}